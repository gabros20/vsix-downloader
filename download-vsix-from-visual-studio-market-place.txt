Repository: mjmirza/download-vsix-from-visual-studio-market-place
Files analyzed: 5

Estimated tokens: 5.6k

Directory structure:
└── mjmirza-download-vsix-from-visual-studio-market-place/
    ├── README.md
    ├── downloadVSIX-V2.bookmark
    ├── downloadVSIX-V2.js
    ├── downloadVSIX.js
    └── index.html


================================================
FILE: README.md
================================================
# Download VS Code Extensions as VSIX

This script allows you to download VS Code extensions as VSIX files directly from the Visual Studio Marketplace.

## How to Use

1. **Open the VS Code extension page on the Visual Studio Marketplace.**
2. **Open the browser's developer console.** (Usually by pressing F12)
3. **Paste the script into the console and press Enter.**
4. **A "Download VSIX" button will appear on the page.** Click it to download the VSIX file.

Or

1. **Copy all content from "downloadVSIX-V2.bookmark"**
2. **Create a bookmark in your browser (tested with Chrome) and paste the content as the URL.**
3. **Open the VS Code extension page on the Visual Studio Marketplace.**
4. **Click on the bookmark and the VSIX file will be downloaded automatically.**

## Script Breakdown

The script consists of two parts:

**1. First Script:**

- Extracts the extension's version, publisher, and unique identifier from the page.
- Constructs the download URL for the VSIX file.
- Creates a download button that triggers the download process.
- Handles progress updates and error messages during the download.

**2. Second Script:**

- Extracts the extension's name, publisher, and version from the page.
- Constructs the URL for the VSIX file using a different API endpoint.
- Opens the VSIX file in a new browser tab.

## Notes

- This script is designed to work with the current structure of the Visual Studio Marketplace. If the website changes, the script may need to be updated.
- The script assumes that the element with the class "vscode-moreinformation" exists on the page. If it doesn't, you'll need to adjust the selector or use a different approach to find the correct parent element.
- The second script is also assumed to be working correctly. If you encounter issues with it, you'll need to debug it separately.

## Author

Mirza Iqbal

## License

This script is released under the MIT License.



================================================
FILE: downloadVSIX-V2.bookmark
================================================
javascript:(function(){var extensionData={version:"",publisher:"",identifier:"",getDownloadUrl:function(){var p=this.identifier.split(".");return "https://"+p[0]+".gallery.vsassets.io/_apis/public/gallery/publisher/"+p[0]+"/extension/"+p[1]+"/"+this.version+"/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage"},getFileName:function(){return this.identifier+"_"+this.version+".vsix"},getDownloadButton:function(){var b=document.createElement("a");b.innerHTML="Download VSIX";b.style.fontFamily="wf_segoe-ui,Helvetica Neue,Helvetica,Arial,Verdana";b.style.display="inline-block";b.style.padding="10px 20px";b.style.background="darkgreen";b.style.color="white";b.style.fontWeight="bold";b.style.fontSize="16px";b.style.margin="2px 5px";b.style.textDecoration="none";b.setAttribute("data-download-url",this.getDownloadUrl());b.setAttribute("data-download-filename",this.getFileName());b.onclick=function(e){var d=e.target.getAttribute("data-download-url"),f=e.target.getAttribute("data-download-filename"),a=document.createElement("a");a.href=d;a.download=f;a.click()};return b}};var metadataMap={"Version":"version","Publisher":"publisher","Unique Identifier":"identifier"};var rows=document.querySelectorAll(".ux-table-metadata tr");for(var i=0;i<rows.length;i++){var cells=rows[i].querySelectorAll("td");if(cells.length===2){var key=cells[0].innerText.trim(),value=cells[1].innerText.trim();if(metadataMap.hasOwnProperty(key))extensionData[metadataMap[key]]=value}};var mi=document.querySelector(".vscode-moreinformation");if(mi){mi.parentElement.appendChild(extensionData.getDownloadButton());}else{console.error("Element with class 'vscode-moreinformation' not found.");}var URL_VSIX_PATTERN='https://marketplace.visualstudio.com/_apis/public/gallery/publishers/${publisher}/vsextensions/${extension}/${version}/vspackage';var itemName=new URL(window.location.href).searchParams.get("itemName");if(itemName){var parts=itemName.split("."),pub=parts[0],ext=parts[1],ver=document.querySelector("#versionHistoryTab tbody tr .version-history-container-column").textContent;var url=URL_VSIX_PATTERN.replace("${publisher}",pub).replace("${extension}",ext).replace("${version}",ver);window.open(url,"_blank");}else{console.error("itemName parameter not found in URL");}})();


================================================
FILE: downloadVSIX-V2.js
================================================
/***
#          Download VS Code extensions as VSIX
#          Author: Mirza Iqbal
***/

// *** SCRIPTS NOT TESTED After July 2024 *** //

/***
// First Script: Extracts extension data and creates a download button
***/
!function() {
    (function() {
        // Object to store extension data (version, publisher, identifier)
        const extensionData = {
            version: "",
            publisher: "",
            identifier: "",
            // Function to get the download URL for the VSIX file
            getDownloadUrl: function() {
                return `https://${this.identifier.split(".")[0]}.gallery.vsassets.io/_apis/public/gallery/publisher/${this.identifier.split(".")[0]}/extension/${this.identifier.split(".")[1]}/${this.version}/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage`;
            },
            // Function to get the filename for the downloaded VSIX file
            getFileName: function() {
                return `${this.identifier}_${this.version}.vsix`;
            },
            // Function to create the download button element
            getDownloadButton: function() {
                const button = document.createElement("a");
                button.innerHTML = "Download VSIX";
                button.style.fontFamily = "wf_segoe-ui,Helvetica Neue,Helvetica,Arial,Verdana";
                button.style.display = "inline-block";
                button.style.padding = "10px 20px"; // Increased padding for a bigger button
                button.style.background = "darkgreen";
                button.style.color = "white";
                button.style.fontWeight = "bold";
                button.style.fontSize = "16px"; // Increased font size
                button.style.margin = "2px 5px";
                button.style.textDecoration = "none"; // Remove default link underline

                // Store the download URL and filename in data attributes
                button.setAttribute("data-download-url", this.getDownloadUrl());
                button.setAttribute("data-download-filename", this.getFileName());

                // Event handler for when the button is clicked
                button.onclick = function(event) {
                    const downloadUrl = event.target.getAttribute("data-download-url");
                    const downloadFilename = event.target.getAttribute("data-download-filename");

                    // Create a temporary link element
                    const link = document.createElement("a");
                    link.href = downloadUrl;
                    link.download = downloadFilename;

                    // Trigger the download
                    link.click();
                };

                return button;
            }
        };

        // Map to associate metadata table headers with extension data keys
        const metadataMap = {
            Version: "version",
            Publisher: "publisher",
            "Unique Identifier": "identifier"
        };

        // Select all rows in the metadata table
        const metadataRows = document.querySelectorAll(".ux-table-metadata tr");

        // Iterate through each row to extract extension data
        for (let i = 0; i < metadataRows.length; i++) {
            const row = metadataRows[i];
            const cells = row.querySelectorAll("td");
            if (cells.length > 1) {
                const key = cells[0].innerText.trim();
                const value = cells[1].innerText.trim();
                if (metadataMap.hasOwnProperty(key)) {
                    extensionData[metadataMap[key]] = value;
                }
            }
        }

        // Find the element with the class "vscode-moreinformation"
        const moreInfoElement = document.querySelector(".ms-Fabric.root-38");
        if (moreInfoElement) {
            // Append the download button to the parent element
            moreInfoElement.parentElement.appendChild(extensionData.getDownloadButton());
        } else {
            console.error("Element with class 'vscode-moreinformation' not found.");
        }
    }
    )()
}();

/***
// Second Script: Opens the VSIX file in a new tab
***/
(function() {
    // Pattern for constructing the VSIX file URL
    const URL_VSIX_PATTERN = 'https://marketplace.visualstudio.com/_apis/public/gallery/publishers/${publisher}/vsextensions/${extension}/${version}/vspackage';
    // Get the extension name from the URL
    const itemName = new URL(window.location.href).searchParams.get('itemName');
    // Split the extension name into publisher and extension parts
    const [publisher, extension] = itemName.split('.');
    // Get the version from the page
    const version = document.querySelector('#versionHistoryTab tbody tr .version-history-container-column').textContent;
    // Construct the VSIX file URL
    const url = URL_VSIX_PATTERN.replace('${publisher}', publisher).replace('${extension}', extension).replace('${version}', version);
    // Open the VSIX file in a new tab
    window.open(url, '_blank');

})();



================================================
FILE: downloadVSIX.js
================================================
/***
#          Download VS Code extensions as VSIX
#          Author: Mirza Iqbal
***/

// *** SCRIPTS NOT TESTED After July 2024 *** //

/***
// First 
***/
!function() {
    (function() {
        const extensionData = {
            version: "",
            publisher: "",
            identifier: "",
            getDownloadUrl: function() {
                return `https://${this.identifier.split(".")[0]}.gallery.vsassets.io/_apis/public/gallery/publisher/${this.identifier.split(".")[0]}/extension/${this.identifier.split(".")[1]}/${this.version}/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage`;
            },
            getFileName: function() {
                return `${this.identifier}_${this.version}.vsix`;
            },
            getDownloadButton: function() {
                const button = document.createElement("a");
                button.innerHTML = "Download VSIX";
                button.href = "javascript:void(0);";
                button.style.fontFamily = "wf_segoe-ui,Helvetica Neue,Helvetica,Arial,Verdana";
                button.style.display = "inline-block";
                button.style.padding = "2px 5px";
                button.style.background = "darkgreen";
                button.style.color = "white";
                button.style.fontWeight = "bold";
                button.style.margin = "2px 5px";
                button.setAttribute("data-url", this.getDownloadUrl());
                button.setAttribute("data-filename", this.getFileName());

                button.onclick = function(event) {
                    event.target.onclick = null;
                    event.target.innerHTML = "Downloading VSIX...";
                    const xhr = new XMLHttpRequest();
                    console.log(event.target.getAttribute("data-url"));
                    xhr.open("GET", event.target.getAttribute("data-url"), true);
                    xhr.responseType = "blob";

                    xhr.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const progress = (event.loaded / event.total * 100).toFixed(0);
                            event.target.innerHTML = `Downloading VSIX... ${progress}%`;
                        }
                    };

                    xhr.onload = function() {
                        if (this.status === 200) {
                            const blob = this.response;
                            const link = document.createElement("a");
                            link.href = window.URL.createObjectURL(blob);
                            link.download = event.target.getAttribute("data-filename");
                            link.click();
                            event.target.href = link.href;
                            event.target.download = link.download;
                            event.target.innerHTML = "Download VSIX";
                        } else {
                            event.target.innerHTML = "Error. Please reload the page and try again.";
                            alert(`Error ${this.status} error receiving the document.`);
                        }
                    };

                    xhr.onerror = function() {
                        event.target.innerHTML = "Error. Please reload the page and try again.";
                        alert(`Error ${this.target.status} occurred while receiving the document.`);
                    };

                    xhr.send();
                };

                return button;
            }
        };

        const metadataMap = {
            Version: "version",
            Publisher: "publisher",
            "Unique Identifier": "identifier"
        };

        const metadataRows = document.querySelectorAll(".ux-table-metadata tr");

        for (let i = 0; i < metadataRows.length; i++) {
            const row = metadataRows[i];
            const cells = row.querySelectorAll("td");
            if (cells.length === 2) {
                const key = cells[0].innerText.trim();
                const value = cells[1].innerText.trim();
                if (metadataMap.hasOwnProperty(key)) {
                    extensionData[metadataMap[key]] = value;
                }
            }
        }

        // Handle the case where the element might not exist
        const moreInfoElement = document.querySelector(".vscode-moreinformation");
        if (moreInfoElement) {
            moreInfoElement.parentElement.appendChild(extensionData.getDownloadButton()).scrollIntoView();
        } else {
            console.error("Element with class 'vscode-moreinformation' not found.");
        }
    }
    )()
}();


/***
// 2nd 
***/
(function() {
    const URL_VSIX_PATTERN = 'https://marketplace.visualstudio.com/_apis/public/gallery/publishers/${publisher}/vsextensions/${extension}/${version}/vspackage';
    const itemName = new URL(window.location.href).searchParams.get('itemName');
    const [publisher, extension] = itemName.split('.');
    const version = document.querySelector('#versionHistoryTab tbody tr .version-history-container-column').textContent;
    const url = URL_VSIX_PATTERN.replace('${publisher}', publisher).replace('${extension}', extension).replace('${version}', version);
    window.open(url, '_blank');

})();



================================================
FILE: index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VS Code Extension Download Guide</title>
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #e74c3c;
            --accent-color: #3498db;
            --background-color: #ecf0f1;
            --text-color: #34495e;
        }
        body, html {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .container {
            width: 90%;
            max-width: 600px;
            background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.5) 100%);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
            transform: perspective(1000px) rotateX(5deg);
            transition: all 0.3s ease;
        }
        .container:hover {
            transform: perspective(1000px) rotateX(0deg);
        }
        .logo {
            width: 120px;
            height: 120px;
            margin: 0 auto 1rem;
            display: block;
            filter: drop-shadow(0 0 10px var(--accent-color));
            animation: float 3s ease-in-out infinite;
        }
        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }
        h1 {
            text-align: center;
            color: var(--primary-color);
            font-size: 2.5rem;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .input-container {
            position: relative;
            margin-bottom: 1.5rem;
        }
        input[type="text"] {
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 50px;
            background-color: rgba(255,255,255,0.8);
            box-shadow: inset 0 2px 5px rgba(0,0,0,0.1);
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        input[type="text"]:focus {
            outline: none;
            box-shadow: 0 0 0 3px var(--accent-color);
        }
        button {
            display: block;
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 50px;
            background-color: var(--secondary-color);
            color: white;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        button:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }
        #result, #finalUrlSection {
            margin-top: 1.5rem;
            text-align: left;
        }
        #result h2, #finalUrlSection h2 {
            color: var(--accent-color);
            margin-bottom: 1rem;
        }
        #result ol {
            padding-left: 20px;
        }
        #result li {
            margin-bottom: 10px;
        }
        .hidden {
            display: none;
        }
        .url-template, #finalUrl {
            background-color: rgba(255,255,255,0.8);
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            margin-top: 10px;
            word-break: break-all;
        }
        #versionInput {
            width: calc(100% - 30px);
            margin-top: 10px;
        }
        #generateFinalUrl {
            margin-top: 10px;
            background-color: var(--accent-color);
        }
        #generateFinalUrl:hover {
            background-color: #2980b9;
        }
        .download-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }
        .download-buttons button {
            width: 48%;
        }
        #downloadVSIX {
            background-color: #27ae60;
        }
        #downloadVSIX:hover {
            background-color: #2ecc71;
        }
        #downloadVSIXPackage {
            background-color: #8e44ad;
        }
        #downloadVSIXPackage:hover {
            background-color: #9b59b6;
        }
        @media (max-width: 600px) {
            .container {
                width: 95%;
                padding: 1.5rem;
            }
            h1 {
                font-size: 2rem;
            }
            .download-buttons {
                flex-direction: column;
            }
            .download-buttons button {
                width: 100%;
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <svg class="logo" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
            <defs>
                <linearGradient id="logo-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" style="stop-color:#3498db;stop-opacity:1" />
                    <stop offset="100%" style="stop-color:#2980b9;stop-opacity:1" />
                </linearGradient>
            </defs>
            <rect x="10" y="10" width="80" height="80" rx="15" fill="url(#logo-gradient)"/>
            <path d="M22 50L38 34L54 50L38 66L22 50Z" fill="white"/>
            <path d="M38 34L70 22V78L38 66L38 34Z" fill="white"/>
        </svg>
        <h1>VS Code Extension Download Guide</h1>
        <div class="input-container">
            <input type="text" id="extensionUrl" placeholder="Enter VS Code extension URL">
        </div>
        <button onclick="generateGuide()">Generate Download Guide</button>
        <div id="result" class="hidden">
            <h2>Download Instructions</h2>
            <ol id="instructions"></ol>
        </div>
        <div id="finalUrlSection" class="hidden">
            <h2>Generate Final Download URLs</h2>
            <input type="text" id="versionInput" placeholder="Enter the version number">
            <button id="generateFinalUrl" onclick="generateFinalUrls()">Generate Final URLs</button>
            <div id="finalUrl" class="hidden"></div>
            <div class="download-buttons hidden">
                <button id="downloadVSIX" onclick="downloadExtension('vsix')">Download VSIX</button>
                <button id="downloadVSIXPackage" onclick="downloadExtension('vsixpackage')">Download VSIXPackage</button>
            </div>
        </div>
    </div>

    <script>
        let urlTemplateVSIX = '';
        let urlTemplateVSIXPackage = '';
        let extensionName = '';

        function resetProcess() {
            document.getElementById('result').classList.add('hidden');
            document.getElementById('finalUrlSection').classList.add('hidden');
            document.getElementById('instructions').innerHTML = '';
            document.getElementById('versionInput').value = '';
            document.getElementById('finalUrl').innerHTML = '';
            document.getElementById('finalUrl').classList.add('hidden');
            document.querySelector('.download-buttons').classList.add('hidden');
        }

        document.getElementById('extensionUrl').addEventListener('input', resetProcess);

        function generateGuide() {
            const url = document.getElementById('extensionUrl').value;
            const resultElement = document.getElementById('result');
            const instructionsElement = document.getElementById('instructions');
            const finalUrlSection = document.getElementById('finalUrlSection');

            resetProcess();

            if (!url) {
                alert('Please enter a valid URL');
                return;
            }

            try {
                const parsedUrl = new URL(url);
                const itemName = parsedUrl.searchParams.get('itemName');

                if (!itemName) {
                    throw new Error('Invalid URL. Please make sure it\'s a VS Code extension URL.');
                }

                const [publisher, extension] = itemName.split('.');
                extensionName = itemName;

                urlTemplateVSIX = `https://${publisher}.gallery.vsassets.io/_apis/public/gallery/publisher/${publisher}/extension/${extension}/[VERSION]/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage`;
                urlTemplateVSIXPackage = `https://${publisher}.gallery.vsassets.io/_apis/public/gallery/publisher/${publisher}/extension/${extension}/[VERSION]/vspackage`;

                const instructions = [
                    `Visit the extension page: <a href="${url}" target="_blank">${url}</a>`,
                    "On the extension page, look for the 'Version' number in the right sidebar.",
                    "Copy the version number (e.g., 1.2.3) and paste it in the input field below.",
                    "Click 'Generate Final URLs' to get the download links for both VSIX and VSIXPackage."
                ];

                instructions.forEach(instruction => {
                    const li = document.createElement('li');
                    li.innerHTML = instruction;
                    instructionsElement.appendChild(li);
                });

                resultElement.classList.remove('hidden');
                finalUrlSection.classList.remove('hidden');
            } catch (error) {
                alert(`An error occurred: ${error.message}`);
            }
        }

        function generateFinalUrls() {
            const versionInput = document.getElementById('versionInput');
            const finalUrlElement = document.getElementById('finalUrl');
            const downloadButtons = document.querySelector('.download-buttons');

            if (!versionInput.value) {
                alert('Please enter a version number');
                return;
            }

            const finalUrlVSIX = urlTemplateVSIX.replace('[VERSION]', versionInput.value);
            const finalUrlVSIXPackage = urlTemplateVSIXPackage.replace('[VERSION]', versionInput.value);

            finalUrlElement.innerHTML = `
                <strong>VSIX URL:</strong><br>${finalUrlVSIX}<br><br>
                <strong>VSIXPackage URL:</strong><br>${finalUrlVSIXPackage}
            `;
            finalUrlElement.classList.remove('hidden');
            downloadButtons.classList.remove('hidden');
        }

        function downloadExtension(type) {
            const versionInput = document.getElementById('versionInput');
            const version = versionInput.value;
            
            if (!version) {
                alert('Please generate the final URLs first');
                return;
            }

            let url, filename;
            if (type === 'vsix') {
                url = urlTemplateVSIX.replace('[VERSION]', version);
                filename = `${extensionName}_${version}.vsix`;
            } else {
                url = urlTemplateVSIXPackage.replace('[VERSION]', version);
                filename = `${extensionName}_${version}.vsixpackage`;
            }

            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    </script>
</body>
</html>

