name: Publish to NPM

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force-publish:
        description: "Force publish even if version exists"
        required: false
        default: false
        type: boolean

jobs:
  publish:
    runs-on: ubuntu-latest
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      actions: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get package.json version
        id: package-version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Package.json version: $PACKAGE_VERSION"

      - name: Check if version exists on NPM
        id: npm-check
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"

          if npm view vsix-downloader@$PACKAGE_VERSION version >/dev/null 2>&1; then
            NPM_VERSION=$(npm view vsix-downloader@$PACKAGE_VERSION version)
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "npm_version=$NPM_VERSION" >> $GITHUB_OUTPUT
            echo "📦 Version $PACKAGE_VERSION already exists on NPM"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "npm_version=" >> $GITHUB_OUTPUT
            echo "✅ Version $PACKAGE_VERSION is available for publishing"
          fi

      - name: Determine if should publish
        id: should-publish
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          VERSION_EXISTS="${{ steps.npm-check.outputs.exists }}"
          FORCE_PUBLISH="${{ github.event.inputs.force-publish }}"

          if [ "$VERSION_EXISTS" = "true" ] && [ "$FORCE_PUBLISH" != "true" ]; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "reason=version-exists" >> $GITHUB_OUTPUT
            echo "ℹ️ Skipping publish - version $PACKAGE_VERSION already exists on NPM"
            echo "💡 To publish anyway, use workflow_dispatch with force-publish=true"
            echo "💡 Or update the version in package.json and push again"
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
            if [ "$FORCE_PUBLISH" = "true" ]; then
              echo "reason=force-publish" >> $GITHUB_OUTPUT
              echo "🚀 Force publishing version $PACKAGE_VERSION"
            else
              echo "reason=new-version" >> $GITHUB_OUTPUT
              echo "🚀 Publishing new version $PACKAGE_VERSION"
            fi
          fi

      - name: Check if git tag exists
        id: tag-check
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          TAG_NAME="v$PACKAGE_VERSION"

          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "🏷️ Tag $TAG_NAME already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $TAG_NAME is available"
          fi

      - name: Generate changelog
        id: changelog
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"

          # Get latest tag for changelog generation
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          echo "# Changelog for v$PACKAGE_VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "## Initial Release" >> CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "## Changes since $LATEST_TAG" >> CHANGELOG.md
            git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          if [ -n "$LATEST_TAG" ]; then
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v$PACKAGE_VERSION" >> CHANGELOG.md
          fi

          # Set output for release notes
          {
            echo "changelog<<EOF"
            cat CHANGELOG.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Build final artifact
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          npm run build
          echo "🏗️ Final build completed"

      - name: Publish to NPM
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          echo "🚀 Publishing v$PACKAGE_VERSION to NPM..."

          # Dry run first
          npm publish --dry-run

          # Actual publish
          npm publish --access public
          echo "✅ Successfully published v$PACKAGE_VERSION to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and push git tag
        if: steps.should-publish.outputs.should_publish == 'true' && steps.tag-check.outputs.tag_exists == 'false'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          TAG_NAME="v$PACKAGE_VERSION"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and push tag
          git tag "$TAG_NAME" -m "Release v$PACKAGE_VERSION"
          git push origin "refs/tags/$TAG_NAME"
          echo "🏷️ Created and pushed tag $TAG_NAME"

      - name: Create GitHub Release
        if: steps.should-publish.outputs.should_publish == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.package-version.outputs.version, 'alpha') || contains(steps.package-version.outputs.version, 'beta') || contains(steps.package-version.outputs.version, 'rc') }}

      - name: Publish summary
        if: steps.should-publish.outputs.should_publish == 'true'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          echo "✅ Version $PACKAGE_VERSION published successfully!"
          echo "📦 NPM Package: https://www.npmjs.com/package/vsix-downloader/v/$PACKAGE_VERSION"
          echo "📋 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v$PACKAGE_VERSION"
          echo "🏷️ Git Tag: v$PACKAGE_VERSION"

          echo "## 📋 Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Published version **$PACKAGE_VERSION** to NPM" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Created git tag **v$PACKAGE_VERSION**" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 Created GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [View on NPM](https://www.npmjs.com/package/vsix-downloader/v/$PACKAGE_VERSION)" >> $GITHUB_STEP_SUMMARY

      - name: Skip publish summary
        if: steps.should-publish.outputs.should_publish == 'false'
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.version }}"
          REASON="${{ steps.should-publish.outputs.reason }}"

          echo "ℹ️ No publish needed for version $PACKAGE_VERSION"

          if [ "$REASON" = "version-exists" ]; then
            echo "📦 Version $PACKAGE_VERSION already exists on NPM"
            echo ""
            echo "## Next steps:"
            echo "1. 📝 Update version in package.json (e.g., to $PACKAGE_VERSION)"
            echo "2. 🔄 Push changes to main branch"
            echo "3. 🚀 Automatic publish will trigger"
            echo ""
            echo "Or run workflow manually with 'force-publish' enabled."
          fi

          echo "## 📋 Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ℹ️ Skipped publishing" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Version **$PACKAGE_VERSION** already exists on NPM" >> $GITHUB_STEP_SUMMARY
          echo "- 💡 Update package.json version to trigger publish" >> $GITHUB_STEP_SUMMARY
