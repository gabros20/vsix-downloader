name: Publish to NPM

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release-type:
        description: "Release type"
        required: true
        default: "auto"
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
          - prerelease

jobs:
  publish:
    runs-on: ubuntu-latest
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      actions: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Manual override from workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.release-type }}" != "auto" ]; then
            echo "release_type=${{ github.event.inputs.release-type }}" >> $GITHUB_OUTPUT
            echo "Manual release type: ${{ github.event.inputs.release-type }}"
            exit 0
          fi

          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Get commits since latest tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --oneline)
          else
            COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline)
          fi

          echo "Commits since $LATEST_TAG:"
          echo "$COMMITS"

          # Determine release type based on conventional commits
          if echo "$COMMITS" | grep -Eq "^[a-f0-9]+ [a-zA-Z]+(\([^)]*\))?!:|BREAKING CHANGE:"; then
            echo "release_type=major" >> $GITHUB_OUTPUT
            echo "🚨 Breaking changes detected - major release"
          elif echo "$COMMITS" | grep -Eq "^[a-f0-9]+ feat(\([^)]*\))?:"; then
            echo "release_type=minor" >> $GITHUB_OUTPUT
            echo "✨ New features detected - minor release"
          elif echo "$COMMITS" | grep -Eq "^[a-f0-9]+ (fix|perf)(\([^)]*\))?:"; then
            echo "release_type=patch" >> $GITHUB_OUTPUT
            echo "🐛 Bug fixes/performance improvements - patch release"
          elif echo "$COMMITS" | grep -Eq "^[a-f0-9]+ (docs|style|refactor|test|chore|ci|build)(\([^)]*\))?:"; then
            echo "release_type=patch" >> $GITHUB_OUTPUT
            echo "🔧 Maintenance changes - patch release"
          else
            echo "release_type=none" >> $GITHUB_OUTPUT
            echo "📝 No significant changes - skipping release"
          fi

      - name: Bump version
        id: bump
        if: steps.version.outputs.release_type != 'none'
        run: |
          RELEASE_TYPE="${{ steps.version.outputs.release_type }}"

          # Bump version
          case "$RELEASE_TYPE" in
            major|minor|patch|prerelease)
              npm version $RELEASE_TYPE --no-git-tag-version
              ;;
            *)
              echo "Invalid release type: $RELEASE_TYPE"
              exit 1
              ;;
          esac

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version bumped to $NEW_VERSION"

      - name: Check if version exists on NPM
        id: check
        if: steps.version.outputs.release_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"

          if npm view vsix-downloader@$NEW_VERSION version >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "❌ Version $NEW_VERSION already exists on NPM"
            exit 1
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $NEW_VERSION is available for publishing"
          fi

      - name: Generate changelog
        id: changelog
        if: steps.version.outputs.release_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          LATEST_TAG="${{ steps.version.outputs.latest_tag }}"

          echo "# Changelog for v$NEW_VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            echo "## Initial Release" >> CHANGELOG.md
            git log --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
          else
            echo "## Changes since $LATEST_TAG" >> CHANGELOG.md
            git log ${LATEST_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...v$NEW_VERSION" >> CHANGELOG.md

          # Set output for release notes
          {
            echo "changelog<<EOF"
            cat CHANGELOG.md
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Build final artifact
        if: steps.version.outputs.release_type != 'none'
        run: |
          npm run build
          echo "🏗️ Final build completed"

      - name: Publish to NPM
        if: steps.version.outputs.release_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          echo "🚀 Publishing v$NEW_VERSION to NPM..."

          # Dry run first
          npm publish --dry-run

          # Actual publish
          npm publish --access public
          echo "✅ Successfully published to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create and push git tag
        if: steps.version.outputs.release_type != 'none'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new_version }}"
          TAG_NAME="v$NEW_VERSION"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create and push tag only (no commit to main due to branch protection)
          git tag "$TAG_NAME"
          git push origin "refs/tags/$TAG_NAME"
          echo "🏷️ Created and pushed tag $TAG_NAME"

      - name: Create GitHub Release
        if: steps.version.outputs.release_type != 'none'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: Release v${{ steps.bump.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.bump.outputs.new_version, 'alpha') || contains(steps.bump.outputs.new_version, 'beta') || contains(steps.bump.outputs.new_version, 'rc') }}

      - name: Publish summary
        if: steps.version.outputs.release_type != 'none'
        run: |
          echo "✅ Version ${{ steps.bump.outputs.new_version }} published successfully"
          echo "📦 Package published: https://www.npmjs.com/package/vsix-downloader"
          echo "📋 Release created: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.bump.outputs.new_version }}"
          echo "🔄 A follow-up PR will be created to sync package.json version"

      - name: No release needed
        if: steps.version.outputs.release_type == 'none'
        run: |
          echo "ℹ️ No significant changes detected. Skipping release."
          echo "💡 Ensure commits follow conventional commit format for automatic releases:"
          echo "   feat: for new features (minor bump)"
          echo "   fix: for bug fixes (patch bump)"
          echo "   feat!: or BREAKING CHANGE: for breaking changes (major bump)"
