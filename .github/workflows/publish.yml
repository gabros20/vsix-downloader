name: Publish to NPM

on:
  pull_request:
    types: [closed]
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    # Run when a PR into main is merged, or on direct pushes to main (e.g. squash merges)
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch')
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: false
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          # On PR merge event, check out the actual merge commit; otherwise fallback to current sha
          ref: ${{ github.event.pull_request.merge_commit_sha || github.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests (if any)
        run: npm test --if-present

      - name: Determine version bump
        id: version
        run: |
          # Ensure tags are available for accurate diffing
          git fetch --tags --force --prune

          # Get the latest version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get commit messages since last tag OR since last 5 commits if no tags
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            SINCE_REF=$(git describe --tags --abbrev=0)
          else
            SINCE_REF=$(git rev-list --max-parents=0 HEAD)
          fi
          COMMITS=$(git log --oneline ${SINCE_REF}..HEAD)

          # Only process if there are new commits
          if [ -z "$COMMITS" ]; then
            echo "bump=none" >> $GITHUB_OUTPUT
            echo "No new commits since last tag"
            exit 0
          fi

          # Determine version bump based on conventional commits
          # Prioritize BREAKING changes first, then features, then fixes/chore/etc
          if echo "$COMMITS" | grep -Eq "^[a-f0-9]+ .*!:|BREAKING CHANGE"; then
              echo "bump=major" >> $GITHUB_OUTPUT
              echo "Breaking changes detected, bumping major version"
          elif echo "$COMMITS" | grep -Eq "^[a-f0-9]+ feat(\(|:| )"; then
              echo "bump=minor" >> $GITHUB_OUTPUT
              echo "New features detected, bumping minor version"
          elif echo "$COMMITS" | grep -Eq "^[a-f0-9]+ (fix|chore|docs|style|refactor|perf|test)(\(|:| )"; then
              echo "bump=patch" >> $GITHUB_OUTPUT
              echo "Bug fixes or minor changes detected, bumping patch version"
          else
              echo "bump=none" >> $GITHUB_OUTPUT
              echo "No version bump needed"
          fi

      - name: Bump version
        id: bump
        if: steps.version.outputs.bump != 'none'
        run: |
          BUMP_TYPE=${{ steps.version.outputs.bump }}
          if [ "$BUMP_TYPE" = "major" ]; then
            npm version major --no-git-tag-version
          elif [ "$BUMP_TYPE" = "minor" ]; then
            npm version minor --no-git-tag-version
          else
            npm version patch --no-git-tag-version
          fi

          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Bumped version to $NEW_VERSION"

      - name: Ensure unique version on NPM
        if: steps.version.outputs.bump != 'none'
        id: ensure
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          ATTEMPTS=0
          while npm view vsix-downloader@$NEW_VERSION version >/dev/null 2>&1; do
            echo "Version $NEW_VERSION already exists on NPM, bumping patch..."
            npm version patch --no-git-tag-version
            NEW_VERSION=$(node -p "require('./package.json').version")
            ATTEMPTS=$((ATTEMPTS+1))
            if [ $ATTEMPTS -gt 10 ]; then
              echo "Exceeded attempts to find an available version" 1>&2
              exit 1
            fi
          done
          echo "final_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Using version $NEW_VERSION for publish"

      - name: Publish to NPM
        if: steps.version.outputs.bump != 'none'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git tag
        if: steps.version.outputs.bump != 'none'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          # Tag the merge commit without pushing code to protected main
          git tag v${{ steps.ensure.outputs.final_version }} $GITHUB_SHA
          git push origin refs/tags/v${{ steps.ensure.outputs.final_version }}

      - name: Create version bump PR
        if: steps.version.outputs.bump != 'none'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: bump version to ${{ steps.ensure.outputs.final_version }}"
          branch: chore/release-v${{ steps.ensure.outputs.final_version }}
          title: "chore: bump version to ${{ steps.ensure.outputs.final_version }}"
          body: |
            This automated PR bumps the package version to `${{ steps.ensure.outputs.final_version }}`
            to reflect the published release. Merging will sync `package.json` with NPM.
          add-paths: |
            package.json

      - name: Create GitHub Release
        if: steps.version.outputs.bump != 'none'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.ensure.outputs.final_version }}
          release_name: Release v${{ steps.ensure.outputs.final_version }}
          body: |
            ## What's Changed

            This release includes the latest changes from the main branch.

            ### Version: ${{ steps.ensure.outputs.final_version }}

            For detailed changes, see the commit history.
          draft: false
          prerelease: false

      - name: Skip publish - no version bump
        if: steps.version.outputs.bump == 'none'
        run: |
          echo "No version bump needed, skipping publish"
          echo "This usually means no conventional commits were found"

      - name: Skip publish - no-op
        if: steps.version.outputs.bump == 'none'
        run: echo "No publish actions required"
